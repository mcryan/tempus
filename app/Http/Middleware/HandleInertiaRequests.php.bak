<?php

namespace App\Http\Middleware;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Inertia\Middleware;

class HandleInertiaRequests extends Middleware
{
    public function __construct()
    {
        file_put_contents(
            storage_path('logs/debug.log'),
            date('Y-m-d H:i:s') . " - HandleInertiaRequests middleware constructed\n",
            FILE_APPEND
        );
    }

    /**
     * The root template that's loaded on the first page visit.
     *
     * @see https://inertiajs.com/server-side-setup#root-template
     *
     * @var string
     */
    protected $rootView = 'app';

    /**
     * Handle the incoming request.
     */
    public function handle(Request $request, \Closure $next)
    {
        file_put_contents(
            storage_path('logs/debug.log'),
            date('Y-m-d H:i:s') . " - HandleInertiaRequests handle method called\n",
            FILE_APPEND
        );

        $response = parent::handle($request, $next);

        file_put_contents(
            storage_path('logs/debug.log'),
            date('Y-m-d H:i:s') . " - HandleInertiaRequests handle method completed\n",
            FILE_APPEND
        );

        return $response;
    }

    /**
     * Determines the current asset version.
     *
     * @see https://inertiajs.com/asset-versioning
     */
    public function version(Request $request): ?string
    {
        return parent::version($request);
    }

    /**
     * Define the props that are shared by default.
     *
     * @see https://inertiajs.com/shared-data
     *
     * @return array<string, mixed>
     */
    public function share(Request $request): array
    {
        file_put_contents(
            storage_path('logs/debug.log'),
            date('Y-m-d H:i:s') . " - HandleInertiaRequests share method called\n",
            FILE_APPEND
        );

        $sharedData = array_merge(parent::share($request), [
            'auth' => [
                'user' => $request->user() ? [
                    'id' => $request->user()->id,
                    'name' => $request->user()->name,
                    'email' => $request->user()->email,
                    'is_admin' => $request->user()->is_admin ?? false,
                ] : null,
            ],
            'flash' => [
                'message' => fn () => $request->session()->get('message'),
                'error' => fn () => $request->session()->get('error'),
            ],
            'ziggy' => [
                'location' => $request->url(),
            ],
        ]);

        return $sharedData;
    }
}
